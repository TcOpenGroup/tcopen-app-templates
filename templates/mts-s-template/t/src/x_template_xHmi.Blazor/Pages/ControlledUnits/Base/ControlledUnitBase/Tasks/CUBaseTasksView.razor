@namespace x_template_xPlc
@inherits RenderableViewModelComponentBase<CUBaseViewModel>

<div class="card">
    <div class="card-header d-flex">

        <div class="p-2 " align="center">
            <label class="form-label"><b>Actual CT</b></label>
            <p>@string.Format("{0:hh\\:mm\\:ss\\:f}", @ViewModel.Component._statusInfo.CurrentCycleTime.Cyclic)</p>
        </div>
        <div class="p-2" align="center">
            <label class="form-label"><b>Avarage CT</b></label>
            <p>@string.Format("{0:hh\\:mm\\:ss\\:f}", @ViewModel.Component._statusInfo.AverageCycleTime.Cyclic)</p>
        </div>
        <div class="p-2" align="center">
            <label class="form-label"><b>Actual Clean CT</b></label>
            <p>@string.Format("{0:hh\\:mm\\:ss\\:f}", @ViewModel.Component._statusInfo.CurrentCleanCycleTime.Cyclic)</p>
        </div>
        <div class="p-2" align="center">
            <label class="form-label"><b>Avarage Clean CT</b></label>
            <p>@string.Format("{0:hh\\:mm\\:ss\\:f}", @ViewModel.Component._statusInfo.AverageCleanCycleTime.Cyclic)</p>
        </div>
        <h3 class="ms-auto">@NameOrSymbolConverterBlazor.Convert(ViewModel.Component)</h3>


    </div>
    <div class="card-body">
        <div class="d-flex">
            <h5 class="me-auto card-title">@ViewModel.Component._statusInfo.CurrentTaskDescription.Cyclic</h5>

            
            @foreach (var task in ViewModel.TaskControls)
            {
                <RenderableContentControl Context="task"
                                          Presentation="TaskCommand"
                                          Class="p-2 "></RenderableContentControl>
            }
        </div>

        @foreach (var task in ViewModel.TaskControls)
        {
            <RenderableContentControl Context="task" Presentation="Sequence-Components"></RenderableContentControl>
        }

    </div>
</div>


@code {
    [Parameter]
    public IVortexElement Vortex { get; set; }

    protected override void OnInitialized()
    {
        if (ViewModel == null)
        {
            ViewModel = new CUBaseViewModel() { Model = Vortex };
        }
        UpdateValuesOnChange(ViewModel.Component._statusInfo);
        base.OnInitialized();
    }
}
