<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="CU00xAutomatTask" Id="{7d4ccf14-fbfb-4c7b-8fab-cda3fabc0370}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CU00xAutomatTask EXTENDS CUBaseAutomat IMPLEMENTS ICUTask
VAR

	_missingProcessSettingMessage : TcoCore.TcoMessenger(THIS^);	
	_paralellTask : CU00xAutomatParalell_1_Task(THIS^, TcoCore.eRestoreMode.None);
	
	_sb : TcoCore.StringBuilder;
END_VAR

VAR
	_dataLoadProcessSettings : BOOL;
	_dataLoadProcessSettingsByPlaner : BOOL;
	_dataCreateNew : BOOL;
	_dataOpen : BOOL;
	_dataClose : BOOL;
	_dataFinalize : BOOL;
	_continueRestore : BOOL;
	_loop : BOOL;	
	_inspectionResult:BOOL;
	_inspectionDimensionResult:REAL;
	_tagsPairing:BOOL;
	_reqKey: STRING;
	_reqAssignedValue: STRING;

	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[RUN();
//(*
//
//	OPENING DATA OPERATIONS
//	Following methods provide process data manipulation for this controlled unit.
//	Remove `IF` statement and comment or uncomment according to your need.
//*)
//// Loads process settings. 
//// Typically used in the first station of the technology to load process settings that will be used trough out the production
//IF (_dataLoadProcessSettings) THEN
//    THIS^.DataLoadProcessSettings(100);
//END_IF;
//
//// Loads process settings via produciton planer. 
//// Typically used in the first station of the technology to load process settings that will be used trough out the production 
//// .......
//IF (_dataLoadProcessSettingsByPlaner) THEN
//    THIS^.DataLoadProcessSettingsByPlaner(110);
//END_IF;
//
//(*
//
//		
//		This step we would like to star cycle time (e.g. we want to exclude loading data from clean cycle time )		
//*)
//IF (Step(150, TRUE, '<#START MEASURE CT TRIGGER#>')) THEN
//    //-------------------------------------    
//    StartCleanCycleTime();
//   	StepCompleteWhen(TRUE);
//    //-------------------------------------
//END_IF
//
//// Creates new data entity (new part/item) 
//// Typically used in the first station of the technology to create new document/record to be persited in the repository.
//// Sets the status of the entity to 'InProgress'
//IF (_dataCreateNew) THEN
//	IF (Step(160, TRUE, 'CREATE ENTIY ID')) THEN
//		//-------------------------------------    
//		Station.ProcessDataManager.Data._EntityId := ULINT_TO_STRING(Context.RealTimeClock.TickClock());
//	
//		StepCompleteWhen(Station.ProcessDataManager.Data._EntityId<>'');
//		//-------------------------------------
//	END_IF
//    THIS^.DataEntityCreateNew(200, Station.ProcessDataManager.Data._EntityId, Header := Station.ProcessDataManager.Data.CU00x.Header);
//END_IF;
//
//// Populates the information in the data header of this controlled unit (operation start time stamp, user info, etc)
//// Typically used prior to starting operation within a controlled unit.
//IF (_dataOpen) THEN
//    THIS^.DataEntityOpen(300,
//        30000,
//        Station.ProcessDataManager.Data._EntityId,
//        Station.ProcessDataManager.Data.CU00x.Header);
//END_IF;
//
//
//// Handle user defined carier id
//// Typically used in the first station of the technology to assign user defined carier ID  instead of raw unique id(RfidChip....)
//IF (_tagsPairing) THEN
//    THIS^.PairTag(400);
//END_IF;
//(*
//
//		STEPS OF THE SEQUENCE
//		Here we would place steps to perfom the operations of this controlled unit.
//
//*)
//IF (Step(1000, TRUE, 'SINGLE INSPECTION')) THEN
//    //-------------------------------------    
//
//	Station.ProcessDataManager.Data.CU00x.BoltPresenceInspector.Data.FailureDescription:='BoltPresenceInspector error';
//    Station.ProcessDataManager.Data.CU00x.BoltPresenceInspector.WithCoordinator(THIS^)
//        .Inspect(_inspectionResult)
//        .UpdateComprehensiveResult(Station.ProcessDataManager.Data.EntityHeader.Results)
//        .OnFail().CarryOn();
//    //-------------------------------------
//END_IF
//
//IF (Step(1100, TRUE, 'SINGLE ANALOGUE INSPECTION')) THEN
//    //-------------------------------------    
//		Station.ProcessDataManager.Data.CU00x.BoltDimensionPresenceInspector.Data.FailureDescription:='BoltDimensionPresenceInspector error';
//
//    Station.ProcessDataManager.Data.CU00x.BoltDimensionPresenceInspector.WithCoordinator(THIS^)
//        .Inspect(_inspectionDimensionResult)
//        .UpdateComprehensiveResult(Station.ProcessDataManager.Data.EntityHeader.Results)
//        .OnFail().CarryOn();
//    //-------------------------------------
//END_IF
//
//IF (Step(2000, true, 'START PARALELL TASK')) THEN
//    //-------------------------------------    
//    StepCompleteWhen(_paralellTask.Task.Invoke().Busy);
//    //-------------------------------------
//END_IF
//
//(*
//
//		RECOVERY STEPS
//		This step and the following steps should bring the controlled unit in a state from which 
//		the sequence can be safely restarted from the beginning of the this sequencer. 		
//*)
//IF (Step(RESTORE_STEP_ID, TRUE, 'FIRST RESTORE STEP')) THEN
//    //-------------------------------------
//    StepCompleteWhen(_continueRestore);
//    //-------------------------------------	
//END_IF
//
//(*
//
//		
//		This step we would save cycle time value (e.g. we not include saving data into cycle time )
//		
//*)
//IF (Step(2150, TRUE, 'STOP MEASURE CT TRIGGER')) THEN
//    //-------------------------------------    
//    StopCleanCycleTime();
//    StepCompleteWhen(TRUE);
//    //-------------------------------------
//END_IF
//
//(*
//
//	CLOSING DATA OPERATIONS
//	Following methods provide process data manipulation for this controlled unit.
//	Comment or uncomment according to your need.
//*)
//// Populates the information in the data header of this controlled unit (operations end time stamp, user info, etc)
//// Typically used after all steps within the controlled unit are completed.
//IF (_dataClose) THEN
//    THIS^.DataEntityClose(5000, eDataEntityInvokeType.InvokeAndWaitDone, Station.ProcessDataManager.Data.CU00x.Header);
//END_IF;
//
//// Populates the information in the data header of this controlled unit (operations end time stamp, user info, etc)
//// Typically used after all operation on the technology are completed.
//// Input parameter eDataEntityInvokeType.InvokeOnly is used for speed up cycle(TRUE)
//IF (_dataFinalize) THEN
//    THIS^.DataEntityFinalize(5500, eDataEntityInvokeType.InvokeOnly, Station.ProcessDataManager.Data.CU00x.Header);
//END_IF;
//
//IF (Step(10000, TRUE, 'WAIT FOR PARALELL TASK TO FINISH')) THEN
//    //-------------------------------------
//    StepCompleteWhen(_paralellTask.Task.Done);
//
//    IF _paralellTask.Task.Done THEN
//        _paralellTask.Restore();
//    END_IF
//    //-------------------------------------	
//END_IF
//
//IF (Step(20000, _dataClose, 'WAIT FOR IF DATA FINALIZE IS DONE')) THEN
//    //-------------------------------------
//    StepCompleteWhen(Station.UpdateEntityTask.Done);
//    //-------------------------------------	
//END_IF
//
//
////monitor if conseccutive failures occur during automatic cycle. System monitor two basic types like are arbitrary failure in seqence, or  same(equal) failure in sequence
////if Number of allowed recurring failure is 0 , monitoring is inactive.
////Recurring failures are based on ErrorCodes in TcoComprehensiveResult.
////If error code in Same recurring failure is empty string ,monitorig of failure is not performed.
////Error code in Arbitrary Recuring failure is irelevant.    
//THIS^.MonitorAnyRecurringFailure(22000,THIS^.Station._settings.AnyRecurringFailure>0 , Station.ProcessDataManager.Data.EntityHeader.Results);
//THIS^.MonitorSameRecurringFailure(22100,THIS^.Station._settings.SameRecurringFailure>0 , Station.ProcessDataManager.Data.EntityHeader.Results);
//
//
//
//IF (Step(30000, TRUE, 'LAST STEP')) THEN
//    //-------------------------------------
//    IF (_loop) THEN
//        CompleteSequence();
//    END_IF;
//    //-------------------------------------	
//END_IF
//
//_paralellTask();]]></ST>
    </Implementation>
    <Folder Name="DataOperations" Id="{d77a8e00-2872-034f-1865-d779c1d38e60}" />
    <Folder Name="ProductionPlaner" Id="{691cdfd9-0331-4efc-8523-78110e4374bd}" />
    <Folder Name="TagsPairing" Id="{b51b23bb-1645-431d-b66e-3f544bdad45c}" />
    <Method Name="DataLoadProcessSettings" Id="{31612bac-ea85-0141-34e0-d7b2a3994f8e}" FolderPath="DataOperations\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Loads technology settings from the current technology set into this controlled unit.
			The `StationProcessDataManager.Data` is populated by data from process settings.						
		</summary>
	</docu>
~*)
METHOD DataLoadProcessSettings : BOOL
VAR_INPUT
	inStepID : INT;
END_VAR

VAR
	_ans: TcoCore.eDialogAnswer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Step(inStepID, _dataLoadProcessSettings, 'LOAD PROCESS SETTING')) THEN
    //-------------------------------------
	
	THIS^._missingProcessSettingMessage.OnCondition(Station.Technology.ProcessSettings.Data._EntityId = '')
									   .Build()
									   .Append('No process data. Please load setting')
									   .As()				   
									   .AsError()
									   .Pin();
					   
				   
	IF(Station.Technology.ProcessSettings.Data._EntityId <> '' (*AND NOT THIS^._missingProcessSettingMessage.Pinned*)) THEN
		IF(Station.Technology.ProcessSettings.Read(Station.Technology.ProcessSettings.Data._EntityId).Done) THEN
			Station.ProcessDataManager.Data := Station.Technology.ProcessSettings.Data;
			Station.ProcessDataManager.Data.EntityHeader.RecipeCreated := Station.Technology.ProcessSettings.Data._Created;
			Station.ProcessDataManager.Data.EntityHeader.RecipeLastModified  := Station.Technology.ProcessSettings.Data._Modified;
			Station.ProcessDataManager.Data.EntityHeader.Recipe  := Station.Technology.ProcessSettings.Data._EntityId;				
			CompleteStep();

		END_IF;	
	ELSE
		_ans:=_dialog.Show()
	       .WithCaption('<#Process data not selected#>')
		   .WithText('<#Would you like to load default settings?#>')
		   .WithYesNoCancel().Answer;
		IF(_ans=TcoCore.eDialogAnswer.Cancel) THEN
			this^.Restore();
		END_IF
		IF( _ans= TcoCore.eDialogAnswer.Yes) THEN
		   
		   	Station.Technology.ProcessSettings.Data._EntityId := 'default';
		END_IF; 

			
	END_IF		    				
    //-------------------------------------
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="DataLoadProcessSettingsByPlaner" Id="{f5f22eb7-e786-437d-afaa-0333a64e6105}" FolderPath="ProductionPlaner\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Loads process settings from the current process set into this controlled unit.
			The `StationProcessDataManager.Data` is populated by data from process settings.						
		</summary>
	</docu>
~*)
METHOD DataLoadProcessSettingsByPlaner : BOOL
VAR_INPUT
	inStepID : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Step(inStepID, _dataLoadProcessSettingsByPlaner, 'LOAD PROCESS SETTING BY THE PRODUCTION PLANER')) THEN
    //-------------------------------------


								   
	 IF Station.ProductionPlanerTask.Invoke().Done	AND_THEN(Station.ProductionPlanerTask.RequiredProcessSettingsId <> '') THEN
		
		IF NOT Station.ProductionPlanerTask.ProductionPlanCompleted and_then (Station.Technology.ProcessSettings.Read(Station.ProductionPlanerTask.RequiredProcessSettingsId).Done)
			 THEN
			Station.ProcessDataManager.Data := Station.Technology.ProcessSettings.Data;
			Station.ProcessDataManager.Data.EntityHeader.RecipeCreated := Station.Technology.ProcessSettings.Data._Created;
			Station.ProcessDataManager.Data.EntityHeader.RecipeLastModified  := Station.Technology.ProcessSettings.Data._Modified;
			Station.ProcessDataManager.Data.EntityHeader.Recipe  := Station.Technology.ProcessSettings.Data._EntityId;				
			CompleteStep();
			Station.ProductionPlanerTask.Restore();
		END_IF;
	ELSIF  Station.ProductionPlanerTask.ProductionPlanIsEmpty THEN
		IF (_dialog.Show()
	       .WithCaption('<#Production planer#>')
		   .WithText('<#Production planer is empty! #>')
			.WithOk().Answer = TcoCore.eDialogAnswer.OK) THEN;
			;// Production plan comleted , here you can write diferent scenario ( leave it with current state , provide ground etc)	 
	
		 	//Station.GroundTask.Task.Invoke();
		   
		End_if;
	
	ELSIF  Station.ProductionPlanerTask.ProductionPlanCompleted THEN
		IF (_dialog.Show()
	       .WithCaption('<#Production planer#>')
		   .WithText('<#Production planer completed required plan! #>')
			.WithOk().Answer = TcoCore.eDialogAnswer.OK) THEN;
			;// Production plan comleted , here you can write diferent scenario ( leave it with current state , provide ground etc)	 
	
		 	//Station.GroundTask.Task.Invoke();
		   
		End_if;

			
	END_IF		    				
    //-------------------------------------
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Main" Id="{65c64653-c354-4e9f-878f-19a4b135c641}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Main method of the sequener. Custom code needs to be placed here. The sequencer is executed by call of **Instance.Run()** method.
			This method is abstract, and it must be overridden in derived block.
		</summary>
	</docu>
~*)
METHOD PROTECTED Main : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*

	OPENING DATA OPERATIONS
	Following methods provide process data manipulation for this controlled unit.
	Remove `IF` statement and comment or uncomment according to your need.
*)
// Loads process settings. 
// Typically used in the first station of the technology to load process settings that will be used trough out the production
IF (_dataLoadProcessSettings) THEN
    THIS^.DataLoadProcessSettings(100);
END_IF;

// Loads process settings via produciton planer. 
// Typically used in the first station of the technology to load process settings that will be used trough out the production 
// .......
IF (_dataLoadProcessSettingsByPlaner) THEN
    THIS^.DataLoadProcessSettingsByPlaner(110);
END_IF;

(*

		
		This step we would like to star cycle time (e.g. we want to exclude loading data from clean cycle time )		
*)
IF (Step(150, TRUE, '<#START MEASURE CT TRIGGER#>')) THEN
    //-------------------------------------    
    StartCleanCycleTime();
    StepCompleteWhen(TRUE);
    //-------------------------------------
END_IF

// Creates new data entity (new part/item) 
// Typically used in the first station of the technology to create new document/record to be persited in the repository.
// Sets the status of the entity to 'InProgress'
IF (_dataCreateNew) THEN
	IF (Step(160, TRUE, 'CREATE ENTIY ID')) THEN
		//-------------------------------------    
		Station.ProcessDataManager.Data._EntityId := ULINT_TO_STRING(Context.RealTimeClock.TickClock());
	
		StepCompleteWhen(Station.ProcessDataManager.Data._EntityId<>'');
		//-------------------------------------
	END_IF
    THIS^.DataEntityCreateNew(200, Station.ProcessDataManager.Data._EntityId, Header := Station.ProcessDataManager.Data.CU00x.Header);
END_IF;

// Populates the information in the data header of this controlled unit (operation start time stamp, user info, etc)
// Typically used prior to starting operation within a controlled unit.
IF (_dataOpen) THEN
    THIS^.DataEntityOpen(300,
        30000,
        Station.ProcessDataManager.Data._EntityId,
        Station.ProcessDataManager.Data.CU00x.Header);
END_IF;


// Handle user defined carier id
// Typically used in the first station of the technology to assign user defined carier ID  instead of raw unique id(RfidChip....)
IF (_tagsPairing) THEN
    THIS^.PairTag(400);
END_IF;
(*

		STEPS OF THE SEQUENCE
		Here we would place steps to perfom the operations of this controlled unit.

*)
IF (Step(1000, TRUE, 'SINGLE INSPECTION')) THEN
    //-------------------------------------    
	Station.ProcessDataManager.Data.CU00x.BoltPresenceInspector.Data.FailureDescription:='BoltPresenceInspector error';
    Station.ProcessDataManager.Data.CU00x.BoltPresenceInspector.WithCoordinator(THIS^)
        .Inspect(_inspectionResult)
        .UpdateComprehensiveResult(Station.ProcessDataManager.Data.EntityHeader.Results)
        .OnFail().CarryOn();
    //-------------------------------------
END_IF

IF (Step(1100, TRUE, 'SINGLE ANALOGUE INSPECTION')) THEN
    //-------------------------------------    
		Station.ProcessDataManager.Data.CU00x.BoltDimensionPresenceInspector.Data.FailureDescription:='BoltDimensionPresenceInspector error';

    Station.ProcessDataManager.Data.CU00x.BoltDimensionPresenceInspector.WithCoordinator(THIS^)
        .Inspect(_inspectionDimensionResult)
        .UpdateComprehensiveResult(Station.ProcessDataManager.Data.EntityHeader.Results)
        .OnFail().CarryOn();
    //-------------------------------------
END_IF

IF (Step(2000, true, 'START PARALELL TASK')) THEN
    //-------------------------------------    
    StepCompleteWhen(_paralellTask.Task.Invoke().Busy);
    //-------------------------------------
END_IF

(*

		RECOVERY STEPS
		This step and the following steps should bring the controlled unit in a state from which 
		the sequence can be safely restarted from the beginning of the this sequencer. 		
*)
IF (Step(RESTORE_STEP_ID, TRUE, 'FIRST RESTORE STEP')) THEN
    //-------------------------------------
    StepCompleteWhen(_continueRestore);
    //-------------------------------------	
END_IF

(*

		
		This step we would save cycle time value (e.g. we not include saving data into cycle time )
		
*)
IF (Step(2150, TRUE, 'STOP MEASURE CT TRIGGER')) THEN
    //-------------------------------------    
    StopCleanCycleTime();
    StepCompleteWhen(TRUE);
    //-------------------------------------
END_IF

(*

	CLOSING DATA OPERATIONS
	Following methods provide process data manipulation for this controlled unit.
	Comment or uncomment according to your need.
*)
// Populates the information in the data header of this controlled unit (operations end time stamp, user info, etc)
// Typically used after all steps within the controlled unit are completed.
IF (_dataClose) THEN
    THIS^.DataEntityClose(5000, eDataEntityInvokeType.InvokeAndWaitDone, Station.ProcessDataManager.Data.CU00x.Header);
END_IF;

// Populates the information in the data header of this controlled unit (operations end time stamp, user info, etc)
// Typically used after all operation on the technology are completed.
// Input parameter eDataEntityInvokeType.InvokeOnly is used for speed up cycle(TRUE)
IF (_dataFinalize) THEN
    THIS^.DataEntityFinalize(5500, eDataEntityInvokeType.InvokeOnly, Station.ProcessDataManager.Data.CU00x.Header);
END_IF;

IF (Step(10000, TRUE, 'WAIT FOR PARALELL TASK TO FINISH')) THEN
    //-------------------------------------
    StepCompleteWhen(_paralellTask.Task.Done);

    IF _paralellTask.Task.Done THEN
        _paralellTask.Restore();
    END_IF
    //-------------------------------------	
END_IF

IF (Step(20000, _dataClose, 'WAIT FOR IF DATA FINALIZE IS DONE')) THEN
    //-------------------------------------
    StepCompleteWhen(Station.UpdateEntityTask.Done);
    //-------------------------------------	
END_IF


//monitor if conseccutive failures occur during automatic cycle. System monitor two basic types like are arbitrary failure in seqence, or  same(equal) failure in sequence
//if Number of allowed recurring failure is 0 , monitoring is inactive.
//Recurring failures are based on ErrorCodes in TcoComprehensiveResult.
//If error code in Same recurring failure is empty string ,monitorig of failure is not performed.
//Error code in Arbitrary Recuring failure is irelevant.    
THIS^.MonitorAnyRecurringFailure(22000,THIS^.Station._settings.AnyRecurringFailure>0 , Station.ProcessDataManager.Data.EntityHeader.Results);
THIS^.MonitorSameRecurringFailure(22100,THIS^.Station._settings.SameRecurringFailure>0 , Station.ProcessDataManager.Data.EntityHeader.Results);



IF (Step(30000, TRUE, 'LAST STEP')) THEN
    //-------------------------------------
    IF (_loop) THEN
        CompleteSequence();
    END_IF;
    //-------------------------------------	
END_IF

_paralellTask();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnStart" Id="{8fe4788f-029c-4df9-a93a-9297bee7e169}">
      <Declaration><![CDATA[METHOD PUBLIC OnStart

]]></Declaration>
      <Implementation>
        <ST><![CDATA[Station.GroundTask.Restore();
Station.ManualTask.Restore();
Station.GroundTask.CancelGround();
_paralellTask.Restore();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PairTag" Id="{baf0b22c-d2fb-48c7-a6ee-a2a5ae7f437b}" FolderPath="TagsPairing\">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Loads process settings from the current process set into this controlled unit.
			The `StationProcessDataManager.Data` is populated by data from process settings.						
		</summary>
	</docu>
~*)
METHOD PairTag : BOOL
VAR_INPUT
	inStepID : INT;
END_VAR

VAR
	answer: TagsPairing;
	_addNewTag: BOOL;
	dialogAnswer: eDialogAnswer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (Step(inStepID, _tagsPairing, '<#PAIR TAG WITH ASSIGNED VALUE EXAMPLE#>')) THEN
    //-------------------------------------
	_addNewTag:=FALSE;

	answer:= Station.Components.PairTagTask.Answer;
	//this field may be assigned by unique ID of rfid chip , or dmc code.The PairTagTask provide answer where is assigned user defined value for this unique ID value.
	//If not, there may be diferent scenarios defined. See example bellow.
	_reqKey:='123456789';				   
	 IF Station.Components.PairTagTask.Run(inMode:=eTagPairingMode.GetTag, inKey:=_reqKey ,inAssignedValue:='').Invoke().Done	 THEN
		
		IF  answer.Answer =eTagPairingAnswer.TagFound 
			 THEN
			Station.ProcessDataManager.Data.EntityHeader.Carrier := answer.AssignedValue;
			CompleteStep();
			Station.Components.PairTagTask.Restore();
		
		ELSIF  answer.Answer = eTagPairingAnswer.TagFoundInactive THEN
			IF (_dialog.Show()
			   .WithCaption('<#Pairing Tag#>')
			   .WithText(_sb.Clear().Append('<#Founded tag #>').Append(_reqKey).Append('<# is inactive! #>').Append(Station.Components.PairTagTask.AnswerInstruction).ToString() )
				.WithOk().Answer = TcoCore.eDialogAnswer.OK) THEN;
				;// Founded tag is Inactive. Probably carier(pallete) was disasbled due produced many errors.Se  here you can write diferent scenario ( leave it with current state , provide ground etc)	 
		
				//Station.GroundTask.Task.Invoke();
			   
			End_if;
		
		ELSIF  answer.Answer = eTagPairingAnswer.TagFoundAssignedValueEmpty THEN
			  IF (_dialog.Show()
			   .WithCaption('<#Pairing Tag#>')
			   .WithText(_sb.Clear().Append('<#Tag #>').Append(_reqKey).Append('<# is founded but assigned value is empty! Would you like continue? #>').Append(Station.Components.PairTagTask.AnswerInstruction).ToString() )
				.WithYesNo().Answer = TcoCore.eDialogAnswer.Yes) THEN;
				CompleteStep();
				Station.Components.PairTagTask.Restore();
			END_IF;
		   
		ELSIF  answer.Answer = eTagPairingAnswer.TagNotFound THEN
			  IF (_dialog.Show()
			   .WithCaption('<#Pairing Tag#>')
			   .WithText(_sb.Clear().Append('<#Tag #>').Append(_reqKey).Append('<# is not founded ! Would you like assign right now? #>').Append(Station.Components.PairTagTask.AnswerInstruction).ToString() )
				.WithYesNo().Answer = TcoCore.eDialogAnswer.Yes) THEN;
				_addNewTag:=TRUE;
				CompleteStep();
				Station.Components.PairTagTask.Restore();
			END_IF;
	
		
			ELSIF  answer.Answer = eTagPairingAnswer.EmptyCollection THEN
			  IF (_dialog.Show()
			   .WithCaption('<#Pairing Tag#>')
			   .WithText(_sb.Clear().Append('<#Tag #>').Append(_reqKey).Append('<# is not founded due collection is empty ! Would you like assign right now? #>').Append(Station.Components.PairTagTask.AnswerInstruction).ToString() )
				.WithYesNo().Answer = TcoCore.eDialogAnswer.Yes) THEN;
				_addNewTag:=TRUE;
				CompleteStep();
				Station.Components.PairTagTask.Restore();
			END_IF;
		End_if;
			
	END_IF		    				
    //-------------------------------------
END_IF

IF (Step(inStepID+10, _tagsPairing AND _addNewTag, '<#ADD NEW TAG  EXAMPLE#>')) THEN
    //-------------------------------------
	
	answer:= Station.Components.PairTagTask.Answer;
	//this field may be assigned by unique ID of rfid chip , or dmc code.The PairTagTask provide answer where is assigned user defined value for this unique ID value.
	//If not, there may be diferent scenarios defined. See example bellow.
	_reqKey:='123456789';		
	_reqAssignedValue := 'CustomIdExample123';	   
	 IF Station.Components.PairTagTask.Run(inMode:=eTagPairingMode.AddTag, inKey:=_reqKey, inAssignedValue:=_reqAssignedValue).Invoke().Done	 THEN
		
		IF  answer.Answer =eTagPairingAnswer.TagAddedSuccessfully 
			 THEN
			Station.ProcessDataManager.Data.EntityHeader.Carrier := answer.AssignedValue;
			CompleteStep();
			Station.Components.PairTagTask.Restore();
		END_IF;
	ELSIF  answer.Answer = eTagPairingAnswer.TagAlreadyExist THEN
		IF (_dialog.Show()
	       .WithCaption('<#Adding Tag#>')
		   .WithText(_sb.Clear().Append('<#Tag #>').Append(_reqKey).Append('<# already exist! #>').Append(Station.Components.PairTagTask.AnswerInstruction).ToString() )
			.WithOk().Answer = TcoCore.eDialogAnswer.OK) THEN;
			;// Founded tag is Inactive. Probably carier(pallete) was disasbled due produced many errors.Se  here you can write diferent scenario ( leave it with current state , provide ground etc)	 
	
		 	//Station.GroundTask.Task.Invoke();
		   
		End_if;
	
	ELSIF  answer.Answer = eTagPairingAnswer.TagAddedNotSuccessfuly THEN
			dialogAnswer := _dialog.Show()
	       .WithCaption('<#Pairing Tag#>')
		   .WithText(_sb.Clear().Append('<#Tag #>').Append(_reqKey).Append('<# was not founnd! Would you like still like to continue? #>').Append(Station.Components.PairTagTask.AnswerInstruction).ToString() )
			.WithYesNo().Answer;
			
	      IF (dialogAnswer= TcoCore.eDialogAnswer.Yes) THEN;
			CompleteStep();
			Station.Components.PairTagTask.Restore();
		END_IF;
		   

			
	END_IF		    				
    //-------------------------------------
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Station" Id="{c497129d-26cb-43ef-a7d7-df3034f001ea}">
      <Declaration><![CDATA[PROPERTY Station : REFERENCE TO CU00x]]></Declaration>
      <Get Name="Get" Id="{9ded1606-ebd7-4887-8d53-88dc18528dcd}">
        <Declaration><![CDATA[VAR
    _station : POINTER TO CU00x;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF __QUERYPOINTER(Parent, _station) THEN // Check if _Parent is Station001
    Station REF= _station^;              // If the check is successful dereference a pointer. simlar to THIS^ or SUPER^
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>